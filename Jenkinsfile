pipeline {
    agent any
    
    environment {
        // Define environment variables
        DOCKER_HUB_REPO = "shubha16/my_tomcat" // Replace with your Docker Hub repository
        DOCKER_HUB_CREDENTIALS = "docker-hub-credentials" // Jenkins credential ID for Docker Hub
        IMAGE_TAG = "latest" // Tag for the Docker image
        WAR_FILE = "target/helloworld.war" // Path to the WAR file generated by your build
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git 'https://github.com/yourusername/yourproject.git' // Replace with your repository URL
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image containing the WAR file
                    sh """
                    docker build -t ${DOCKER_HUB_REPO}:${IMAGE_TAG} .
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub using Jenkins credentials
                    docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                        // You can keep this empty as Jenkins will auto-use the credentials
                    }
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                        sh """
                        docker push ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }
        
        stage('Deploy Docker Container') {
            steps {
                script {
                    // Pull and run the Docker container on the target environment (could be a remote server)
                    sh """
                    docker run -d -p 8080:8080 ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
